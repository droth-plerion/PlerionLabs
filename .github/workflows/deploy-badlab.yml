name: Build & Deploy BadLab

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_ROLE_TO_ASSUME: ${{ vars.AWS_ROLE_TO_ASSUME }}
  STACK_NAME: ${{ vars.STACK_NAME }}
  ARTIFACT_BUCKET: ${{ vars.ARTIFACT_BUCKET }}
  PUBLIC_BUCKET_NAME: ${{ vars.PUBLIC_BUCKET_NAME }}

defaults:
  run:
    shell: bash -euo pipefail

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Show repo tree
        run: |
          echo "::group::tree"
          git --version
          ls -la
          tree -a -I '.git|node_modules' || true
          echo "::endgroup::"

      # ──────────────────────────────────────────────────────────────
      # Build the vulnerable layer ZIP under layers/vuln-py39/build/
      # ──────────────────────────────────────────────────────────────
      - name: Build vulnerable layer (python3.9)
        id: build_layer
        working-directory: layers/vuln-py39
        run: |
          docker build -t badlab-py39 .
          docker run --rm -v "$PWD":/opt -w /opt badlab-py39 bash -lc '
            python -V
            yum -y install zip >/dev/null 2>&1 || true
            mkdir -p build/python
            pip install --no-cache-dir -r /opt/requirements.lock.txt -t build/python
            cd build && zip -r9 vuln-py39-layer.zip python
          '
          echo "layer_zip=$PWD/build/vuln-py39-layer.zip" >> "$GITHUB_OUTPUT"

      - name: Upload layer to S3 (capture VersionId)
        id: upload_layer
        run: |
          LAYER_KEY="layers/vuln-py39-layer.zip"
          ZIP="${{ steps.build_layer.outputs.layer_zip }}"
          echo "Uploading layer: $ZIP -> s3://$ARTIFACT_BUCKET/$LAYER_KEY"
          RESP="$(aws s3api put-object --bucket "$ARTIFACT_BUCKET" --key "$LAYER_KEY" --body "$ZIP")"
          echo "$RESP"
          VERSION="$(jq -r '.VersionId // ""' <<<"$RESP")"
          echo "layer_key=$LAYER_KEY"            >> "$GITHUB_OUTPUT"
          echo "layer_version=$VERSION"          >> "$GITHUB_OUTPUT"

      # ──────────────────────────────────────────────────────────────
      # Build the function.zip (with vulnerable deps) in the same
      # python3.9 container so wheels match the Lambda runtime.
      # ──────────────────────────────────────────────────────────────
      - name: Build function ZIP (with vulnerable deps)
        id: build_fn
        working-directory: lambda/hello
        run: |
          docker run --rm -v "$PWD":/opt -w /opt badlab-py39 bash -lc '
            yum -y install zip >/dev/null 2>&1 || true
            rm -rf build && mkdir -p build/python
            pip install --no-cache-dir -r requirements.txt -t build/python
            cp index.py build/
            (cd build && zip -r9 function.zip .)
          '
          echo "fn_zip=$PWD/build/function.zip" >> "$GITHUB_OUTPUT"

      - name: Upload function ZIP to S3 (capture VersionId)
        id: upload_fn
        run: |
          FN_KEY="lambda/hello/function.zip"
          ZIP="${{ steps.build_fn.outputs.fn_zip }}"
          echo "Uploading function: $ZIP -> s3://$ARTIFACT_BUCKET/$FN_KEY"
          RESP="$(aws s3api put-object --bucket "$ARTIFACT_BUCKET" --key "$FN_KEY" --body "$ZIP")"
          echo "$RESP"
          VERSION="$(jq -r '.VersionId // ""' <<<"$RESP")"
          echo "fn_key=$FN_KEY"                 >> "$GITHUB_OUTPUT"
          echo "fn_version=$VERSION"            >> "$GITHUB_OUTPUT"

      # ──────────────────────────────────────────────────────────────
      # Deploy CloudFormation
      # (Template must accept FunctionS3Key, FunctionS3ObjectVersion,
      #  VulnLayerKey, LayerS3ObjectVersion, ArtifactBucket, etc.)
      # ──────────────────────────────────────────────────────────────
      - name: Deploy CloudFormation
        run: |
          aws cloudformation deploy \
            --stack-name "$STACK_NAME" \
            --template-file infra/plerion-badlab.yaml \
            --capabilities CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset \
            --parameter-overrides \
              PublicBucketName="$PUBLIC_BUCKET_NAME" \
              ArtifactBucket="$ARTIFACT_BUCKET" \
              VulnLayerKey="${{ steps.upload_layer.outputs.layer_key }}" \
              LayerS3ObjectVersion="${{ steps.upload_layer.outputs.layer_version }}" \
              FunctionS3Key="${{ steps.upload_fn.outputs.fn_key }}" \
              FunctionS3ObjectVersion="${{ steps.upload_fn.outputs.fn_version }}" \
              LambdaRuntime="python3.9"

      - name: Show stack outputs
        run: |
          aws cloudformation describe-stacks \
            --stack-name "$STACK_NAME" \
            --query "Stacks[0].Outputs" --output table
