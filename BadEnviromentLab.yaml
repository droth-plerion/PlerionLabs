AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Plerion Misconfig Lab (FINAL + old Lambda runtime) - Intentionally insecure resources for workshops:
  - Public RDS with both GOOD and BAD SGs attached (bad rule overrides good)
  - API Gateway with mixed auth (one resource secured, one public)
  - Public S3 bucket (BPA disabled + public policy)
  - SQS queue open to the world
  - Lambda: outdated runtime (python3.9), public Function URL, admin perms, secrets in env
  - IAM anti-patterns: wildcard-trust admin role; break-glass users with keys; *:* dev group
  - Publicly readable Secrets Manager secret

Parameters:
  PublicBucketName:
    Type: String
    Default: plerion-badlab-public-bucket-123456
    Description: Globally-unique S3 bucket name.
  DBMasterUsername:
    Type: String
    Default: admin
    Description: Default 'admin' to simulate bad practice.
  DBMasterPassword:
    Type: String
    NoEcho: true
    Default: Pl3rionBadLab123!
    Description: Plaintext DB password to simulate hardcoding.
  LambdaRuntime:
    Type: String
    Default: python3.9
    AllowedValues: [python3.9, python3.10, python3.11, python3.12]
    Description: Older runtime by default (swap to 3.10/3.11 if 3.9 creation is blocked in your region).
  ApiStageName:
    Type: String
    Default: prod

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label: { default: "General" }
        Parameters: [ApiStageName]
      - Label: { default: "S3" }
        Parameters: [PublicBucketName]
      - Label: { default: "RDS" }
        Parameters: [DBMasterUsername, DBMasterPassword]
      - Label: { default: "Lambda" }
        Parameters: [LambdaRuntime]
    ParameterLabels:
      PublicBucketName: { default: "Public S3 bucket name (must be unique)" }

Resources:

  ########################################
  # Networking (simple public VPC)
  ########################################
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags: [{ Key: Name, Value: PlerionBadLabVPC }]

  IGW:
    Type: AWS::EC2::InternetGateway

  IGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref IGW

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags: [{ Key: Name, Value: PlerionBadLabPublicA }]

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags: [{ Key: Name, Value: PlerionBadLabPublicB }]

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW

  PublicSubnetARouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetBRouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable

  ########################################
  # Over-permissive Security Group (kept for demos)
  ########################################
  OverPermissiveSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Intentionally over-permissive: ALL traffic from 0.0.0.0/0"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: "Everything inbound (bad)"
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: "Everything outbound (overbroad)"
      Tags: [{ Key: Name, Value: PlerionBadLabAllowAll }]

  ########################################
  # RDS (Public, bad config) + GOOD and BAD DB SGs applied together
  ########################################
  AppTierSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "App tier SG (simulated producer)"
      VpcId: !Ref VPC
      SecurityGroupIngress: []
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  DBGoodSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "GOOD: Only allow Postgres from AppTierSG"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref AppTierSG
          Description: "Postgres from App tier only"
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  DBBadSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "BAD: Postgres open to the world"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 0.0.0.0/0
          Description: "Public Postgres (bad)"
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: PlerionBadLab Public DB subnets
      SubnetIds: [!Ref PublicSubnetA, !Ref PublicSubnetB]

  BadLabRDS:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete
    Properties:
      DBInstanceIdentifier: plerion-badlab-db
      DBName: badlab
      Engine: postgres
      EngineVersion: '15'
      PubliclyAccessible: true
      MasterUsername: !Ref DBMasterUsername
      MasterUserPassword: !Ref DBMasterPassword
      AllocatedStorage: 20
      DBInstanceClass: db.t3.micro
      VPCSecurityGroups:
        - !Ref DBGoodSG
        - !Ref DBBadSG
      DBSubnetGroupName: !Ref DBSubnetGroup
      BackupRetentionPeriod: 0
      AutoMinorVersionUpgrade: false
      StorageEncrypted: false
      MultiAZ: false
      DeletionProtection: false
      EnableCloudwatchLogsExports: []

  ########################################
  # S3 - Public bucket (BPA disabled + public bucket policy)
  ########################################
  PublicBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref PublicBucketName
      AccessControl: PublicRead
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html
      Tags:
        - { Key: Purpose, Value: "BadLabPublic" }

  PublicBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref PublicBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowGetFromAnyone
            Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub "${PublicBucket.Arn}/*"

  ########################################
  # SQS - Open to the world
  ########################################
  OpenQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: plerion-badlab-open-queue

  OpenQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues: [!Ref OpenQueue]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowAllOnQueue
            Effect: Allow
            Principal: "*"
            Action: "sqs:*"
            Resource: !GetAtt OpenQueue.Arn

  ########################################
  # Lambda: OLD runtime (Python 3.9), admin perms, secrets in env, public URL
  ########################################
  LambdaAdminRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: PlerionBadLabLambdaAdminRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: { Service: lambda.amazonaws.com }
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
      Policies:
        - PolicyName: BasicLogs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  BadLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: plerion-badlab-hello
      Runtime: !Ref LambdaRuntime
      Handler: index.handler
      Role: !GetAtt LambdaAdminRole.Arn
      Timeout: 10
      Environment:
        Variables:
          STRIPE_SECRET_KEY: "sk_live_REDACTED"
          AWS_ACCESS_KEY_ID: "AKIAFAKEEXPOSED"
          AWS_SECRET_ACCESS_KEY: "very-bad-to-store-here"
      Code:
        ZipFile: |
          import os, json
          def handler(event, context):
              print("EnvLeakExample", dict(os.environ))
              return {"statusCode": 200, "body": json.dumps({"ok": True, "event": event})}

  BadLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${BadLambda}"
      RetentionInDays: 1

  BadLambdaUrl:
    Type: AWS::Lambda::Url
    Properties:
      TargetFunctionArn: !Ref BadLambda
      AuthType: NONE
      Cors:
        AllowOrigins: ["*"]
        AllowMethods: ["GET","POST","OPTIONS"]
        AllowHeaders: ["*"]

  BadLambdaUrlPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref BadLambda
      Action: lambda:InvokeFunctionUrl
      Principal: "*"
      FunctionUrlAuthType: NONE

  ########################################
  # API Gateway (one method uses authorizer, another is open)
  ########################################
  ApiRoleForInvoke:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: { Service: apigateway.amazonaws.com }
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: InvokeLambda
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt BadLambda.Arn

  ApiGatewayRest:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: PlerionBadLabAPI
      EndpointConfiguration: { Types: ["REGIONAL"] }

  ApiResourcePublic:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRest
      ParentId: !GetAtt ApiGatewayRest.RootResourceId
      PathPart: public

  ApiResourceSecure:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRest
      ParentId: !GetAtt ApiGatewayRest.RootResourceId
      PathPart: secure

  AuthorizerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: { Service: lambda.amazonaws.com }
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: Logs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  AuthorizerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: plerion-badlab-authorizer
      Runtime: !Ref LambdaRuntime
      Handler: index.handler
      Role: !GetAtt AuthorizerFunctionRole.Arn
      Code:
        ZipFile: |
          def handler(event, context):
              token = (event.get('authorizationToken') or '').lower()
              effect = 'Allow' if 'allow' in token else 'Deny'
              return {
                  "principalId": "user",
                  "policyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [{
                          "Action": "execute-api:Invoke",
                          "Effect": effect,
                          "Resource": event["methodArn"]
                      }]
                  }
              }

  AuthorizerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AuthorizerFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com

  TokenAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: BadLabTokenAuthorizer
      RestApiId: !Ref ApiGatewayRest
      Type: TOKEN
      AuthorizerUri: !Sub >
        arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthorizerFunction.Arn}/invocations
      IdentitySource: method.request.header.Authorization

  PublicGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRest
      ResourceId: !Ref ApiResourcePublic
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS
        Credentials: !GetAtt ApiRoleForInvoke.Arn
        IntegrationHttpMethod: POST
        Uri: !Sub >
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BadLambda.Arn}/invocations
        PassthroughBehavior: WHEN_NO_MATCH
      MethodResponses:
        - StatusCode: 200

  SecureGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRest
      ResourceId: !Ref ApiResourceSecure
      HttpMethod: GET
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref TokenAuthorizer
      Integration:
        Type: AWS
        Credentials: !GetAtt ApiRoleForInvoke.Arn
        IntegrationHttpMethod: POST
        Uri: !Sub >
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BadLambda.Arn}/invocations
        PassthroughBehavior: WHEN_NO_MATCH
      MethodResponses:
        - StatusCode: 200

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: [PublicGetMethod, SecureGetMethod]
    Properties:
      RestApiId: !Ref ApiGatewayRest
      StageName: !Ref ApiStageName

  LambdaInvokeFromApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref BadLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRest}/*/*/*"

  ########################################
  # IAM Anti-Patterns
  ########################################
  OpenTrustAdminRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: PlerionBadLabOpenTrustAdminRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  BreakGlassUser:
    Type: AWS::IAM::User
    Properties:
      UserName: break-glass-admin
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
      Tags:
        - { Key: Purpose, Value: "BadLab" }

  BreakGlassAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref BreakGlassUser

  DevsGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: plerion-badlab-devs
      Policies:
        - PolicyName: EverythingEverywhereAllAtOnce
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "*"
                Resource: "*"

  DevUser:
    Type: AWS::IAM::User
    Properties:
      UserName: dev-user
      Groups: [!Ref DevsGroup]

  DevUserKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref DevUser

  ########################################
  # Secrets Manager - publicly readable secret
  ########################################
  BadSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: plerion/badlab/public-secret
      Description: "Intentionally misconfigured: public-readable secret"
      SecretString: '{"SuperSecretProdKey":"shh-12345"}'

  BadSecretPolicy:
    Type: AWS::SecretsManager::ResourcePolicy
    Properties:
      SecretId: !Ref BadSecret
      ResourcePolicy:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowAnyoneReadSecret
            Effect: Allow
            Principal: "*"
            Action: "secretsmanager:GetSecretValue"
            Resource: !GetAtt BadSecret.Arn

Outputs:
  PublicBucketNameOut:
    Value: !Ref PublicBucketName
    Description: Public S3 bucket (BPA disabled + public policy)

  RDSAddress:
    Value: !GetAtt BadLabRDS.Endpoint.Address
    Description: Public RDS endpoint (Postgres) — effective access is PUBLIC due to BAD SG.

  DBGoodSGId:
    Value: !Ref DBGoodSG
    Description: GOOD DB SG (5432 from AppTierSG only)

  DBBadSGId:
    Value: !Ref DBBadSG
    Description: BAD DB SG (5432 from 0.0.0.0/0)

  BadLambdaRuntime:
    Value: !Ref LambdaRuntime
    Description: Lambda runtime in use (defaults to older python3.9)

  BadLambdaFunctionUrl:
    Value: !GetAtt BadLambdaUrl.FunctionUrl
    Description: Public Lambda Function URL (no auth)

  ApiInvokePublic:
    Value: !Sub "https://${ApiGatewayRest}.execute-api.${AWS::Region}.amazonaws.com/${ApiStageName}/public"
    Description: Open API endpoint (no authorizer)

  ApiInvokeSecure:
    Value: !Sub "https://${ApiGatewayRest}.execute-api.${AWS::Region}.amazonaws.com/${ApiStageName}/secure"
    Description: API endpoint protected by custom authorizer (send Authorization: allow)

  BreakGlassAccessKeyId:
    Value: !Ref BreakGlassAccessKey
    Description: Break-glass admin user AccessKeyId

  BreakGlassSecretAccessKey:
    Value: !GetAtt BreakGlassAccessKey.SecretAccessKey
    Description: Break-glass admin user SecretAccessKey (intentionally exposed)

  DevUserAccessKeyId:
    Value: !Ref DevUserKey
    Description: Dev user AccessKeyId (*:* perms)

  DevUserSecretAccessKey:
    Value: !GetAtt DevUserKey.SecretAccessKey
    Description: Dev user SecretAccessKey

  OpenTrustAdminRoleArn:
    Value: !GetAtt OpenTrustAdminRole.Arn
    Description: Wildcard-trust admin role ARN
